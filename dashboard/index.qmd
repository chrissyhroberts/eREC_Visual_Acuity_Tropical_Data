---
title: "eREC Monitoring"
author: "`r Sys.time()`"
date: "`r Sys.Date()`"
format:
  dashboard:
    self-contained: true
    sidebar: true
    navbar: true
    width: 240
---

```{r warning=FALSE, include=FALSE}
########################################################################################
# Load libraries required for analysis
########################################################################################
library(ruODK)
library(tidyverse)
library(ComplexUpset)
library(lubridate)
library(tidyverse)
library(htmlTable)
library(kableExtra)
library(plotly)
library(leaflet)
library(leaflet.extras2)
library(RColorBrewer)
library(sp)  # For creating polygons
library(sf)  # For calculating convex hulls
  

```

```{r,echo=F,message=F,warning=F, include=FALSE}

########################################################################################
#connect to server and download current data
########################################################################################
# make any changes to environment file

readRenviron("/Users/icrucrob/.Renviron")

ruODK::ru_setup(
  url = "https://central.lshtm.ac.uk",
  pid = "135",
  fid = "eREC_Examination_Form_Ethiopia",
  un = Sys.getenv("ODKC_UN_yahoo"),
  pw = Sys.getenv("ODKC_PW_yahoo"),
  tz = "Europe/London",

  verbose = TRUE
)

# get form schema
fq<-ruODK::form_schema()

# download submissions 
# select only useful variables
# Remove extraneous fields by removing 'structure' fields

df_raw<-ruODK::odata_submission_get(expand = T,parse = T,verbose = F) %>% 
  ruODK::handle_ru_datetimes(form_schema = fq) %>% 
  ruODK::odata_submission_rectangle(names_sep = "_") %>% 
  select (
  "splash_form_created_timestamp"                                                      ,
  "splash_form_created_date"                                                           ,
  "splash_form_finalised_timestamp"                                                    ,
  "person_info_sf0a"                                                                   ,
  "person_info_sf0b"                                                                   ,
  "person_info_sf0c"                                                                   ,
  "person_info_sf2b"                                                                   ,
  "person_info_sf2c"                                                                   ,
  "person_info_sf1a"                                                                   ,
  "person_info_sf1b"                                                                   ,
  "person_location_cluster"                                                            ,
  "person_location_randomiser"                                                         ,
  "person_location_standard_minimal_peek"                                              ,
  "peek_visual_acuity_tests_peek_uncorrected_right_eye_label"                          ,
  "peek_visual_acuity_tests_peek_uncorrected_right_eye_log_mar"                        ,
  "peek_visual_acuity_tests_peek_uncorrected_right_eye_lux"                            ,
  "peek_visual_acuity_tests_peek_uncorrected_left_eye_label"                           ,
  "peek_visual_acuity_tests_peek_uncorrected_left_eye_log_mar"                         ,
  "peek_visual_acuity_tests_peek_uncorrected_left_eye_lux"                             ,
  "peek_visual_acuity_tests_peek_corrected_right_eye_label"                            ,
  "peek_visual_acuity_tests_peek_corrected_right_eye_log_mar"                          ,
  "peek_visual_acuity_tests_peek_corrected_right_eye_lux"                              ,
  "peek_visual_acuity_tests_peek_corrected_left_eye_label"                             ,
  "peek_visual_acuity_tests_peek_corrected_left_eye_log_mar"                           ,
  "peek_visual_acuity_tests_peek_corrected_left_eye_lux"                               ,
  "peek_visual_acuity_tests_peek_dv_pinhole_right_eye_label"                           ,
  "peek_visual_acuity_tests_peek_dv_pinhole_right_eye_log_mar"                         ,
  "peek_visual_acuity_tests_peek_dv_pinhole_right_eye_lux"                             ,
  "peek_visual_acuity_tests_peek_dv_pinhole_left_eye_label"                            ,
  "peek_visual_acuity_tests_peek_dv_pinhole_left_eye_log_mar"                          ,
  "peek_visual_acuity_tests_peek_dv_pinhole_left_eye_lux"                              ,
  "peek_visual_acuity_tests_peek_nva_uncorrected_binocular_label"                      ,
  "peek_visual_acuity_tests_peek_nva_uncorrected_binocular_log_mar"                    ,
  "peek_visual_acuity_tests_peek_nva_uncorrected_binocular_lux"                        ,
  "peek_visual_acuity_tests_peek_nva_corrected_binocular_label"                        ,
  "peek_visual_acuity_tests_peek_nva_corrected_binocular_log_mar"                      ,
  "peek_visual_acuity_tests_peek_nva_corrected_binocular_lux"                          ,
  "peek_visual_acuity_tests_rapid_peek_uncorrected_right_eye_rapid_label"              ,
  "peek_visual_acuity_tests_rapid_peek_uncorrected_right_eye_rapid_pass"               ,
  "peek_visual_acuity_tests_rapid_peek_uncorrected_right_eye_rapid_lux"                ,
  "peek_visual_acuity_tests_rapid_peek_uncorrected_left_eye_rapid_label"               ,
  "peek_visual_acuity_tests_rapid_peek_uncorrected_left_eye_rapid_pass"                ,
  "peek_visual_acuity_tests_rapid_peek_uncorrected_left_eye_rapid_lux"                 ,
  "peek_visual_acuity_tests_rapid_peek_corrected_right_eye_rapid_label"                ,
  "peek_visual_acuity_tests_rapid_peek_corrected_right_eye_rapid_pass"                 ,
  "peek_visual_acuity_tests_rapid_peek_corrected_right_eye_rapid_lux"                  ,
  "peek_visual_acuity_tests_rapid_peek_corrected_left_eye_rapid_label"                 ,
  "peek_visual_acuity_tests_rapid_peek_corrected_left_eye_rapid_pass"                  ,
  "peek_visual_acuity_tests_rapid_peek_corrected_left_eye_rapid_lux"                   ,
  "peek_visual_acuity_tests_rapid_peek_dv_pinhole_right_eye_rapid_label"               ,
  "peek_visual_acuity_tests_rapid_peek_dv_pinhole_right_eye_rapid_pass"                ,
  "peek_visual_acuity_tests_rapid_peek_dv_pinhole_right_eye_rapid_lux"                 ,
  "peek_visual_acuity_tests_rapid_peek_dv_pinhole_left_eye_rapid_label"                ,
  "peek_visual_acuity_tests_rapid_peek_dv_pinhole_left_eye_rapid_pass"                 ,
  "peek_visual_acuity_tests_rapid_peek_dv_pinhole_left_eye_rapid_lux"                  ,
  "peek_visual_acuity_tests_rapid_peek_nva_uncorrected_binocular_rapid_label"          ,
  "peek_visual_acuity_tests_rapid_peek_nva_uncorrected_binocular_rapid_pass"           ,
  "peek_visual_acuity_tests_rapid_peek_nva_uncorrected_binocular_rapid_lux"            ,
  "peek_visual_acuity_tests_rapid_peek_nva_corrected_binocular_rapid_label"            ,
  "peek_visual_acuity_tests_rapid_peek_nva_corrected_binocular_rapid_pass"             ,
  "peek_visual_acuity_tests_rapid_peek_nva_corrected_binocular_rapid_lux"              ,
  "referral_name"                                                                      ,
  "referral_address"                                                                   ,
  "referral_contact_number"                                                            ,
  "location_geolocation_longitude"                                                     ,
  "location_geolocation_latitude"                                                      ,
  "location_geolocation_altitude"                                                      ,
  "location_geolocation_accuracy"                                                      ,
  "location_geolocation_type"                                                          ,
  "location_geolocation_coordinates_1"                                                 ,
  "location_geolocation_coordinates_2"                                                 ,
  "location_geolocation_coordinates_3"                                                 ,
  "location_geolocation_properties_accuracy"                                           ,
  "meta_audit"                                                                         ,
  "meta_instance_id"                                                                   ,
  "id"                                                                                 ,
  "system_submission_date"                                                             ,
  "system_updated_at"                                                                  ,
  "system_submitter_id"                                                                ,
  "system_submitter_name"                                                              ,
  "system_attachments_present"                                                         ,
  "system_attachments_expected"                                                        ,
  "system_status"                                                                      ,
  "system_review_state"                                                                ,
  "system_device_id"                                                                   ,
  "system_edits"                                                                       ,
  "system_form_version"                                                                ,
  "odata_context"   
)


```

```{r, include=F}

df<- df_raw %>%  
  filter(system_submitter_name != "testing") %>% 
  filter(system_submitter_name != "Chrissy h. Roberts (User)") %>% 
  rename (
     age = "person_info_sf0a",
     sex = "person_info_sf0b",
     education_level = "person_info_sf0c",
     presents_with_distance_vision_correction = "person_info_sf2b",
     presents_with_near_vision_correction = "person_info_sf2c",
     history_corrective_surgery = "person_info_sf1a",
     history_corrective_surgery_years_since = "person_info_sf1b" 
        ) %>% 
  mutate_if(is.character, toupper) %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate_if(is.POSIXct, lubridate::as_datetime) %>% 
  mutate(
    splash_form_created_date = as.Date(splash_form_created_date), # remove time
    survey_duration = as.numeric(round(difftime(splash_form_finalised_timestamp,splash_form_created_timestamp,units = "secs"),0)), #adds time taken for this survey
          )

# GET RECORDS AFTER START DATE
df<- df %>%   filter(splash_form_created_date > "2024-10-28")


```


```{r, include=F}
#Correct records where there's the cluster was entered incorrectly
df<-df %>% 
  mutate(
    person_location_cluster =
      case_when(
                system_device_id=="COLLECT:8MSZQ7J4LG7WXMRT" & splash_form_created_date== "2024-10-29" ~ "004_JUHARA_ABDI",
                system_device_id=="COLLECT:8MSZQ7J4LG7WXMRT" & splash_form_created_date== "2024-10-30" ~ "018_HAWWAA_ABDURAMAAN",
                id=="UUID:25F88C3A-4810-4D72-A227-B1DC53B98399" ~ "011_XAYYIBO_MUMMAD",
                id=="UUID:D8E59CBB-0A51-4954-A757-10BB9C0D4B3A" ~ "996_ALIA_ZIYAD",
                id=="UUID:92238D17-10C0-4462-BB57-E71017EA971C" ~ "996_ALIA_ZIYAD",
                id=="UUID:FFCB2FE0-F4E9-4C32-AAE6-605A9CB2B2C4" ~ "996_ALIA_ZIYAD",                
                id=="UUID:2560EE44-0A95-4BF0-B595-27DAC8FA0A03" ~ "996_ALIA_ZIYAD",
                id=="UUID:470BB02F-28B2-4279-8135-AD14480F4D25" ~ "996_ALIA_ZIYAD",
                id=="UUID:95548195-2FC6-424A-83E1-50D994EE2982" ~ "996_ALIA_ZIYAD",
                id=="UUID:0917C63E-E268-42FC-98FA-AE647BF66F8A" ~ "996_ALIA_ZIYAD",
                id=="UUID:09550A71-E476-48A2-9C97-54EB05240E08" ~ "010_SAARAA_MUMMAD",
                id=="UUID:F8AE1326-0638-41F8-99A8-C125857A2CB1" ~ "010_SAARAA_MUMMAD",
                id=="UUID:8F10D327-95BE-4D3F-9748-2FDCA5F8498E" ~ "010_SAARAA_MUMMAD",
                id=="UUID:3CBBB18B-63D7-42B6-B67E-00A8E3863493" ~ "014_FAAXUMAA_AHAMAD",
                id=="UUID:3448A56C-CEA6-4467-A967-DE0A5B6E9C31" ~ "014_FAAXUMAA_AHAMAD",
                id=="UUID:0BD15ED0-43D0-4FC3-B90C-3934D54D9467" ~ "004_JUHARA_ABDI",
                id=="UUID:07A56978-FE10-4D25-ACEA-52D448E4A434" ~ "717_SHUGRIYA_YUSUF",
                id=="UUID:9538E6AA-D7AE-44DE-873C-873409D5EBF8" ~ "717_SHUGRIYA_YUSUF",
                id=="UUID:5E9C177A-2630-486C-A6EB-F132984A826B" ~ "717_SHUGRIYA_YUSUF",
                id=="UUID:240493A2-8D27-486E-9BF0-64D46D286290" ~ "717_SHUGRIYA_YUSUF",
                id=="UUID:CDA6A211-D29A-401C-BCD8-36FD9897CC9B" ~ "717_SHUGRIYA_YUSUF",
                id=="UUID:396C5BB1-5619-4CFE-A332-DB0BA331B0D8" ~ "716_FARIYA_ABDUJABAR",
                id=="UUID:584E98E4-E9D6-4597-B30C-B2A1123E7AF2"~"006_FATUMA_IBRO",
                id=="UUID:584E98E4-E9D6-4597-B30C-B2A1123E7AF2"~"006_FATUMA_IBRO",
                id=="UUID:3776CE77-831D-4599-A616-B950BFE4A7A3"~"006_FATUMA_IBRO",
                id=="UUID:24FA2480-D787-459E-82C3-70CB279E6A4E"~"006_FATUMA_IBRO",
                id=="UUID:5E4C8181-912C-4E76-B778-CF103111652B"~"006_FATUMA_IBRO",
                id=="UUID:C433B886-A887-4BBA-BC23-1E6FC28657E2"~"006_FATUMA_IBRO",
                id=="UUID:0FDD1725-9B7A-46D9-B165-D4A68F85C6B4"~"006_FATUMA_IBRO",
                id=="UUID:9B9DC2E4-A934-4D68-9853-67AE4624845D"~"006_FATUMA_IBRO",
                id=="UUID:D64B3F28-93FA-49BC-873D-FE79FE82CE7A"~"006_FATUMA_IBRO",
                id=="UUID:64D88100-0C05-4F46-9075-8DAC025468F1"~"006_FATUMA_IBRO",
                id=="UUID:91C6A18F-3F2C-42AD-9F46-A1B65CFD1277"~"006_FATUMA_IBRO",
                id=="UUID:64D88100-0C05-4F46-9075-8DAC025468F1"~"006_FATUMA_IBRO",
                id=="UUID:DCBD3766-F2D6-42E2-A434-8638D0903217"~"006_FATUMA_IBRO",
                id=="UUID:07E908EA-905F-40CB-AFB2-416933AAC48A"~"006_FATUMA_IBRO",
                id=="UUID:02B19DCB-6401-4EE9-A43B-D9D6DF05F2A4"~"006_FATUMA_IBRO",
                id=="UUID:82353E2F-00AC-4214-A1B9-F3E656A0F7D4"~"006_FATUMA_IBRO",
                id=="UUID:83170ADF-3C62-4B83-9BB8-3DBD8083EBAC"~"006_FATUMA_IBRO",
                id=="UUID:B7BDE741-8156-4E47-8EF8-0FBBEACAFD07"~"006_FATUMA_IBRO",
                id=="UUID:66762351-03D4-4E0F-B34A-DE10D0412000"~"006_FATUMA_IBRO",
                id=="UUID:82681CD8-D8F7-4BD7-8439-4865EEC802C3"~"006_FATUMA_IBRO",
                id=="UUID:51371A1A-6EB5-49B3-8FF6-1EFD4F66D404"~"006_FATUMA_IBRO",
                id=="UUID:E8C99A86-5449-4FC7-8465-6F1B751BD4F4"~"006_FATUMA_IBRO",
                id=="UUID:1F12833E-E153-4D5C-9627-000972C7D5D8"~"006_FATUMA_IBRO",
                id=="UUID:76F0B1E8-C516-4E75-A4CE-E9E271484D9C"~"006_FATUMA_IBRO",
                id=="UUID:176BD25C-42CE-457E-8133-5F5A5E1BB633"~"006_FATUMA_IBRO",
                id=="UUID:60AC8027-8EBF-4A2D-B0EA-9CFF30689661"~"006_FATUMA_IBRO",
                id=="UUID:36D970BE-7232-4D0D-977E-31126747CE81"~"006_FATUMA_IBRO",
                id=="UUID:8D392F7B-F55B-42E0-B7ED-049FC1686CC9"~"006_FATUMA_IBRO",
                id=="UUID:CDFED58C-11E1-4159-B92E-2B48443FEEA9"~"006_FATUMA_IBRO",
                id=="UUID:E836CE63-D9AB-43C2-B9E1-7BE31109769C"~"006_FATUMA_IBRO",
                id=="UUID:EAB14236-FE5A-4368-89EA-99784D65F559"~"006_FATUMA_IBRO",
                id=="UUID:962A41F0-D790-4A8F-BA8D-3506878B1C71"~"006_FATUMA_IBRO",
                id=="UUID:D896E58A-FD6F-4AC9-95B5-58527D0CA3D4"~"006_FATUMA_IBRO",
                id=="UUID:B85F5573-9186-43FE-A6AC-F9AE833C88B2"~"012_AMINAA_AHAMAD",
                id=="UUID:0799DB64-E8C5-49E0-8453-6461AB315E5A"~"705_MUSLIMAA_AMAD_",
                id==""~"",
                id==""~"",
                id==""~"",
                id==""~"",
                id==""~"",
                id==""~"",
                id==""~"",
                id==""~"",

                TRUE ~ person_location_cluster
              ),
    person_location_cluster = as.factor(person_location_cluster)
          )

```

# Overall Progress

## Top Pane

```{r,warning=F,message=F,echo=F}
# Load necessary libraries
library(dplyr)
library(plotly)

# Define the date range
start_date <- as.Date("2024-10-23")
end_date <- as.Date("2024-12-01")

# Create a sequence of all dates within the range
all_dates <- seq.Date(start_date, end_date, by = "day")

# Group data by country, cluster, and date
daily_counts <- df %>% 
  group_by(person_location_cluster, splash_form_created_date) %>%
  summarise(n = n(), .groups = 'drop')

# Calculate the total number of submissions
total_submissions <- sum(daily_counts$n, na.rm = TRUE)

# Create a data frame with all dates and clusters to ensure all dates are represented
expanded_dates <- expand.grid(splash_form_created_date = all_dates,
                              person_location_cluster = unique(daily_counts$person_location_cluster))

# Merge the expanded dates with the actual data to fill in missing dates with zero counts
daily_counts <- expanded_dates %>%
  left_join(daily_counts, by = c("splash_form_created_date", "person_location_cluster")) %>%
  mutate(n = ifelse(is.na(n), 0, n))

# Create the plot
p <- plot_ly(data = daily_counts, 
             x = ~splash_form_created_date, 
             y = ~n, 
             color = ~person_location_cluster, 
             type = 'bar') %>%
  layout(barmode = 'stack',
         title = paste("Daily Submissions by Cluster - Total Submissions:", total_submissions),
         xaxis = list(title = 'Date',
                      tickangle = -90,
                      tickformat = "%Y-%m-%d",
                      tickmode = 'linear',
                      dtick = 7*86400000,  # One day in milliseconds
                      range = c(start_date, end_date)),
         yaxis = list(title = 'Number of Submissions'))

# Render the plot
p

```




```{r,echo=FALSE, warning=FALSE ,message = F}

# Filter the data
filtered_df <- df %>% 
  filter(presents_with_near_vision_correction == "NO",
         presents_with_distance_vision_correction == "NO",
         survey_duration < 3600)

  

p <- plot_ly() %>%
  # Add the violin plot
  add_trace(data = filtered_df,
            y = ~person_location_standard_minimal_peek,
            x = ~survey_duration,
            type = 'violin',
            orientation = 'h',  # Horizontal orientation
            side = 'positive',  # Violin on the positive side
            box = list(visible = FALSE),  # Hide the box in the violin plot
            meanline = list(visible = TRUE, line = list(color = 'red')),  # Mean line color
            line = list(color = 'black'),  # Violin line color
            fillcolor = 'rgba(93, 164, 214, 0.5)',
            opacity = 0.6,
            points = FALSE,  # Remove points from the violin layer
            name = 'Violin Plot',
            showlegend = FALSE) %>%
 
  # Add the box plot as a separate trace
  add_trace(data = filtered_df,
            y = ~person_location_standard_minimal_peek,
            x = ~survey_duration,
            type = 'box',
            orientation = 'h',  # Horizontal orientation
            boxpoints = 'all',  # Show all points
            jitter = 0.25,   # Adjust jitter to bring points closer
            pointpos = -1.5,  # Position points to the left side
            fillcolor = 'rgba(255, 255, 255, 0)',  
            marker = list(size = 3),  # Adjust point size for box plot points
            line = list(color = 'lightgrey'),  # Box color and width
            opacity = 0.7,
            name = 'Box Plot',
            showlegend = FALSE) %>%
  layout(title = "Time taken to complete submission, by protocol",
         yaxis = list(title = 'Protocol'),
         xaxis = list(title = 'Survey Duration (seconds)', range = c(0, max(filtered_df$survey_duration) * 1.1)),  # Set x-axis range
        range = list(0, max(filtered_df$survey_duration) * 1.1),  
legend = list(title = list(text = "Key"),
                       orientation = 'h',   # Horizontal legend
                       x = 0.5,
                       xanchor = 'center',
                       y = -0.2),
         violingap = 0,  # Gap between violins
         violinmode = 'group')  # Group violins by y-axis variable
         

# Render the plot
p
```



## Bottom Pane

```{r,warning=F,message=F,echo=F}

# Add jitter to the rounded latitude and longitude values
set.seed(123)  # Set seed for reproducibility

# Define a custom jitter function
custom_jitter <- function(x, amount) {
  x + runif(length(x), min = -amount, max = amount)
}

df <- df %>% filter(person_location_cluster!="") %>% 
 mutate(
  jittered_longitude = custom_jitter(location_geolocation_longitude, amount = 0.0003),
  jittered_latitude =custom_jitter(location_geolocation_latitude, amount = 0.0003)
)

# Define a color palette for the clusters
palette <- colorFactor(palette = brewer.pal(9, "Set1"), domain = df$person_location_cluster)

# Function to create a polygon for each cluster
create_cluster_polygons <- function(df) {
  clusters <- unique(df$person_location_cluster)
  polygons <- lapply(clusters, function(cluster) {
    cluster_points <- df %>% filter(person_location_cluster == cluster)
    cluster_points <- cluster_points %>%
      filter(!is.na(jittered_longitude) & !is.na(jittered_latitude))  # Filter out rows with missing coordinates
    
    if (nrow(cluster_points) > 0) {
      coords <- cbind(cluster_points$jittered_longitude, cluster_points$jittered_latitude)
      sp_points <- st_as_sf(as.data.frame(coords), coords = c("V1", "V2"), crs = 4326)
      hull <- st_convex_hull(st_union(sp_points))
      count <- nrow(cluster_points)
      return(list(cluster = cluster, hull = hull, count = count))
    } else {
      return(NULL)
    }
  })
  polygons <- Filter(Negate(is.null), polygons)  # Remove NULL elements
  return(polygons)
}

# Create polygons for each cluster
cluster_polygons <- create_cluster_polygons(df)


# Sort the cluster names
sorted_cluster_names <- sort(unique(df$person_location_cluster))


# Create the leaflet map using the jittered coordinates
map <- leaflet(df) %>%
  addTiles(options = tileOptions(maxZoom = 18))

# Add circle markers with clustering options
map <- map %>%
  addCircleMarkers(
    lng = ~jittered_longitude,
    lat = ~jittered_latitude,
    radius = ~location_geolocation_accuracy / 5,  # Adjust radius based on accuracy
    color = ~palette(person_location_cluster),
    fillOpacity = 0.7,
    popup = ~paste(id),  # Add popup with cluster ID
    group = "Circle Markers",
    clusterOptions = markerClusterOptions(
      spiderfyOnMaxZoom = TRUE,  # Enable radial expansion
      showCoverageOnHover = FALSE,  # Show coverage area on hover
      zoomToBoundsOnClick = TRUE,  # Zoom to bounds when clicked
      maxClusterRadius = 200,  # Adjust this value to control clustering behavior
      disableClusteringAtZoom = 15  # Stop clustering at this zoom level
    )
  )

# Add polygons and labels to the same group as the clusters
for (polygon_data in cluster_polygons) {
  cluster_group <- paste("Cluster", polygon_data$cluster)
  map <- map %>%
    addPolygons(
      data = polygon_data$hull,
      color = palette(polygon_data$cluster),
      fillOpacity = 0.3,
      group = cluster_group,
      label = paste(polygon_data$cluster, "(", polygon_data$count, ")"),
      labelOptions = labelOptions(
        noHide = FALSE,
        direction = "auto"
      )
    )
}

# Add layer control to the map
map <- map %>%
  addLayersControl(
    overlayGroups = c("Circle Markers", paste("Cluster", sorted_cluster_names)),
    options = layersControlOptions(collapsed = FALSE)
  )

# Render the map
map

```


# 

# Protocols and Devices

## Top pane

```{r,warning=F,message=F,echo=F}

# Group data by country, cluster, and date
protocol_counts <- df %>% 
  group_by(person_location_cluster, person_location_standard_minimal_peek) %>%
  reframe(n = n(), .groups = 'drop')


# Create the plot
p <- plot_ly(data = protocol_counts, 
             x = ~person_location_cluster, 
             y = ~n, 
             color = ~person_location_standard_minimal_peek, 
             type = 'bar') %>% 
  layout(barmode = 'stack',
         title = "Total Submissions by Cluster and Protocol (Ethiopia)",
         xaxis = list(title = 'Cluster',
                      tickangle = 45,
                      tickmode = 'linear',
         yaxis = list(title = 'Number of Submissions')))


# Render the plot
p
```



## Bottom Pane

```{r,warning=F,message=F,echo=F}
# Calculate counts of submissions by device
counts_clusters_device_protocol <- df %>%
  group_by(system_device_id) %>%
  reframe(n = n()) %>%
  arrange(system_device_id)

# Create the bar plot using plotly
p <- plot_ly(data = counts_clusters_device_protocol,
             y = ~system_device_id,
             x = ~n,
             type = 'bar',
             marker = list(color = 'rgba(93, 164, 214, 0.5)')) %>%
  layout(title = "Total submissions by device",
         yaxis = list(title = 'Device', tickangle = 0),
         xaxis = list(title = 'Count'),
         legend = list(orientation = 'h', x = 0.5, xanchor = 'center', y = -0.2),
         margin = list(b = 150))  # Adjust bottom margin for x-axis labels

# Render the plot
p

```

```{r,echo=FALSE, warning=FALSE ,message = F}

# Filter the data
filtered_df <- df %>% 
  filter(survey_duration < 3600)

p <- plot_ly() %>%
 
  # Add the box plot as a separate trace
  add_trace(data = filtered_df,
            y = ~system_device_id,
            x = ~survey_duration,
            type = 'box',
            orientation = 'h',  # Horizontal orientation
            boxpoints = 'all',  # Show all points
            jitter = 0.25,   # Adjust jitter to bring points closer
            pointpos = 0,  # Position points to the left side
            fillcolor = 'rgba(255, 255, 255, 0)',  
            marker = list(size = 3),  # Adjust point size for box plot points
            line = list(color = 'black'),  # Box color and width
            opacity = 0.7,
            name = 'Box Plot',
            showlegend = FALSE) %>%
  layout(title = "Time taken to complete submission, by device",
         yaxis = list(title = 'Protocol'),
         xaxis = list(title = 'Survey Duration (seconds)'),  # Set x-axis range
        range = list(0, max(filtered_df$survey_duration) * 1.1),  
legend = list(title = list(text = "Key"),
                       orientation = 'h',   # Horizontal legend
                       x = 0.5,
                       xanchor = 'center',
                       y = -0.2),
         violingap = 0,  # Gap between violins
         violinmode = 'group')  # Group violins by y-axis variable
         

# Render the plot
p
```


# Demographic distributions (Ethiopia)

## Top panel

```{r,echo=FALSE, warning=FALSE ,message = F}
## Age distributions by cluster 
# Filter the data for Nigeria
filtered_df <- df 

# Create the box plot using plotly
p <- plot_ly(data = filtered_df,
             x = ~person_location_cluster,
             y = ~age,
             type = 'box',
             boxpoints = 'none',  # Show all points
             jitter = 0.3,       # Add jitter to points for better visibility
             pointpos = 0,       # Position points
             marker = list(opacity = 0.6)) %>%
  layout(title = "Age distributions by cluster (Ethiopia)",
         xaxis = list(title = 'Cluster', tickangle = 45),
         yaxis = list(title = 'Age', range = c(0, 125)),  # Set y-axis limits
         margin = list(b = 150))  # Adjust bottom margin for x-axis labels

# Render the plot
p

```

```{r,echo=FALSE, warning=FALSE ,message = F}
## Sex distributions by cluster 


# Calculate proportions and standard error
result_df <- df %>% 
  group_by(person_location_cluster) %>% 
  mutate(denom = n()) %>% 
  group_by(person_location_cluster, sex) %>% 
  summarize(
    n = n(), 
    denom = first(denom), 
    prop = n / first(denom),
    prop_se = sqrt((prop * (1 - prop)) / first(denom)),  # Calculate standard error of the proportions
    .groups = 'drop'
  ) %>% 
  arrange(person_location_cluster)

# Filter for females
female_df <- result_df %>% filter(sex == "FEMALE")

# Create the plotly plot with error bars
p <- plot_ly(data = female_df,
             x = ~person_location_cluster,
             y = ~prop,
             type = 'scatter',
             mode = 'markers',
             error_y = list(type = 'data', array = ~prop_se, visible = TRUE),
             marker = list(size = 10, color = 'rgba(93, 164, 214, 0.5)'),
             showlegend = FALSE) %>%
  layout(title = "Sex distributions by cluster (Ethiopia)",
         xaxis = list(title = 'Cluster', tickangle = 45),
         yaxis = list(title = 'Proportion Female'),
         margin = list(b = 150))  # Adjust bottom margin for x-axis labels

# Render the plot
p

```

```{r,echo=FALSE, warning=FALSE, message = F}

# Calculate proportions and standard error
result_df <- df %>% 
  group_by(person_location_cluster) %>% 
  mutate(denom = n()) %>% 
  group_by(person_location_cluster, education_level) %>% 
  summarize(
    n = n(), 
    denom = first(denom), 
    prop = n / first(denom),
    prop_se = sqrt((prop * (1 - prop)) / first(denom)),  # Calculate standard error of the proportions
    .groups = 'drop'
  ) %>% 
  arrange(person_location_cluster)

# Create the plotly plot with multiple traces for each education level
p <- plot_ly()

education_levels <- unique(result_df$education_level)

for (level in education_levels) {
  df_level <- result_df %>% filter(education_level == level)
  
  p <- p %>%
    add_trace(data = df_level,
              x = ~person_location_cluster,
              y = ~prop,
              type = 'scatter',
              mode = 'markers',
              error_y = list(type = 'data', array = ~prop_se, visible = TRUE),
              marker = list(size = 10),
              name = level,
              showlegend = TRUE)
}

p <- p %>%
  layout(title = "Educational levels by cluster (Ethiopia)",
         xaxis = list(title = 'Cluster', tickangle = 45),
         yaxis = list(title = 'Proportion with educational level', range = c(0, 1)),  # Set y-axis limits
         margin = list(b = 150))  # Adjust bottom margin for x-axis labels

# Render the plot
p
```

## Bottom Panel

```{r,echo=FALSE, warning=FALSE ,message = F}

# Calculate proportions and standard error
result_df <- df %>% 
  group_by(person_location_cluster) %>% 
  mutate(denom = n()) %>% 
  group_by(person_location_cluster, presents_with_distance_vision_correction) %>% 
  reframe(
    n = n(), 
    denom = first(denom), 
    prop = n / first(denom),
    prop_se = sqrt((prop * (1 - prop)) / first(denom)),  # Calculate standard error of the proportions
    .groups = 'drop'
  ) %>% 
  arrange(person_location_cluster)

# Filter for individuals presenting with distance vision correction
filtered_df <- result_df %>% 
  filter(presents_with_distance_vision_correction == "YES")

# Create the plotly plot with error bars and facets
p <- plot_ly()



  p <- p %>%
    add_trace(data = filtered_df,
              x = ~person_location_cluster,
              y = ~prop,
              type = 'scatter',
              mode = 'markers',
              error_y = list(type = 'data', array = ~prop_se, visible = TRUE),
              marker = list(size = 10),
              showlegend = TRUE)

p <- p %>%
  layout(title = "Distance Vision Correction (Ethiopia)",
         xaxis = list(title = 'Cluster', tickangle = 45),
         yaxis = list(title = 'Proportion with Distance Vision Correction', range = c(0, 1)),  # Set y-axis limits
         margin = list(b = 150))  # Adjust bottom margin for x-axis labels

# Render the plot
p
```

```{r,echo=FALSE, warning=FALSE ,message = F}

# Calculate proportions and standard error
result_df <- df %>% 
  group_by(person_location_cluster) %>% 
  mutate(denom = n()) %>% 
  group_by(person_location_cluster, presents_with_near_vision_correction) %>% 
  reframe(
    n = n(), 
    denom = first(denom), 
    prop = n / first(denom),
    prop_se = sqrt((prop * (1 - prop)) / first(denom)),  # Calculate standard error of the proportions
    .groups = 'drop'
  ) %>% 
  arrange(person_location_cluster)

# Filter for individuals presenting with distance vision correction
filtered_df <- result_df %>% 
  filter(presents_with_near_vision_correction == "YES")

# Create the plotly plot with error bars and facets
p <- plot_ly()



  p <- p %>%
    add_trace(data = filtered_df,
              x = ~person_location_cluster,
              y = ~prop,
              type = 'scatter',
              mode = 'markers',
              error_y = list(type = 'data', array = ~prop_se, visible = TRUE),
              marker = list(size = 10),
              showlegend = TRUE)

p <- p %>%
  layout(title = "Near Vision Correction (Ethiopia)",
         xaxis = list(title = 'Cluster', tickangle = 45),
         yaxis = list(title = 'Proportion with Near Vision Correction', range = c(0, 1)),  # Set y-axis limits
         margin = list(b = 150))  # Adjust bottom margin for x-axis labels

# Render the plot
p
```

```{r,echo=FALSE, warning=FALSE ,message = F}

# Calculate proportions and standard error
result_df <- df %>% 
  group_by(person_location_cluster) %>% 
  mutate(denom = n()) %>% 
  group_by(person_location_cluster, history_corrective_surgery) %>% 
  reframe(
    n = n(), 
    denom = first(denom), 
    prop = n / first(denom),
    prop_se = sqrt((prop * (1 - prop)) / first(denom)),  # Calculate standard error of the proportions
    .groups = 'drop'
  ) %>% 
  arrange(person_location_cluster)

# Filter for individuals presenting with distance vision correction
filtered_df <- result_df %>% 
  filter(history_corrective_surgery == "YES")

# Create the plotly plot with error bars and facets
p <- plot_ly()



  p <- p %>%
    add_trace(data = filtered_df,
              x = ~person_location_cluster,
              y = ~prop,
              type = 'scatter',
              mode = 'markers',
              error_y = list(type = 'data', array = ~prop_se, visible = TRUE),
              marker = list(size = 10),
              showlegend = TRUE)

p <- p %>%
  layout(title = "History of Surgical Correction (Ethiopia)",
         xaxis = list(title = 'Cluster', tickangle = 45),
         yaxis = list(title = 'Proportion with Surgical Correction', range = c(0, 1)),  # Set y-axis limits
         margin = list(b = 150))  # Adjust bottom margin for x-axis labels

# Render the plot
p
```


# Extra analyses

## Top Pane

```{r}
filtered_df<-df %>% 
  mutate(age_group = cut(age,breaks = c(0,10,15,20,30,40,50,60,120),labels = c("0_10","11_15","16_20","21_30","31_40","41_50","51_60","61_120")))

ggplotly(ggplot(filter(filtered_df,survey_duration<3600),aes(sex,survey_duration,fill=sex))+
  geom_boxplot()+
  facet_grid(.~age_group) +
  ggtitle("Survey Duration by Age and Sex (Ethiopia)")
)

```

```{r}
filtered_df<-df %>% 
  mutate(
    education_level = factor(education_level,levels=c("EDUCATION_NONE","EDUCATION_PRIMARY","EDUCATION_MIDDLE","EDUCATION_HIGHSCHOOL","EDUCATION_FURTHER_HIGHER"))
  )

ggplotly(ggplot(filter(filtered_df,survey_duration<3600),aes(sex,survey_duration,fill=education_level))+
  geom_boxplot()+
  facet_grid(.~education_level) +
  ggtitle("Survey Duration by Education and Sex (Ethiopia)")
)





```

## Bottom pane
```{r}
filtered_df<-df %>% 
  mutate(
    age_group = cut(age,breaks = c(0,10,15,20,30,40,50,60,120),labels = c("0_10","11_15","16_20","21_30","31_40","41_50","51_60","61_120")),
    education_level = factor(education_level,levels=c("EDUCATION_NONE","EDUCATION_PRIMARY","EDUCATION_MIDDLE","EDUCATION_HIGHSCHOOL","EDUCATION_FURTHER_HIGHER"))
  )
    
  

 

ggplotly(ggplot(filter(filtered_df,survey_duration<3600),aes(age_group,survey_duration,fill=education_level))+
  geom_boxplot()+
  facet_grid(.~education_level) +
  ggtitle("Survey Duration by Education and Age (Ethiopia)")+
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
)

```

```{r}
filtered_df<-df %>% 
  mutate(age_group = cut(age,breaks = c(0,10,15,20,30,40,50,60,120),labels = c("0_10","11_15","16_20","21_30","31_40","41_50","51_60","61_120")))

ggplotly(ggplot(filter(filtered_df,survey_duration<3600),aes(person_location_standard_minimal_peek,survey_duration,fill=person_location_standard_minimal_peek))+
  geom_boxplot()+
  facet_grid(.~age_group) +
  ggtitle("Survey Duration by Age and Protocol (Ethiopia)")
)

```


